name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: django-celery-redis-backend
  ECS_CLUSTER_NAME: django-celery-redis-backend-cluster
  ECS_SERVICE_NAME: django-celery-redis-backend-service
  CONTAINER_NAME: django
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_BACKEND_BUCKET: django-bucket-1234
  TERRAFORM_BACKEND_KEY: terraform.tfstate
  TERRAFORM_BACKEND_DYNAMODB_TABLE: terraform-lock-table

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin \
        $(aws sts get-caller-identity --query "Account" --output text).dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        ECR_REGISTRY=$(aws sts get-caller-identity --query "Account" --output text).dkr.ecr.$AWS_REGION.amazonaws.com
        IMAGE_TAG=${{ github.sha }}
        IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Initialize Terraform
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TERRAFORM_BACKEND_BUCKET }}" \
          -backend-config="key=${{ env.TERRAFORM_BACKEND_KEY }}" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ env.TERRAFORM_BACKEND_DYNAMODB_TABLE }}" \
          -backend-config="encrypt=true"

    - name: Validate Terraform configuration
      working-directory: ./terraform
      run: terraform validate
      
        
    - name: Plan Terraform deployment
      working-directory: ./terraform
      env:
        IMAGE_URI: ${{ env.IMAGE_URI }}
      run: |
        terraform plan -out=tfplan -input=false \
          -var="image=$IMAGE_URI"
        

    - name: Apply Terraform deployment
      working-directory: ./terraform
      run: terraform apply -input=false tfplan

    - name: Output Terraform variables
      working-directory: ./terraform
      run: terraform output

    - name: Fetch ECS Task Public IP
      run: |
        echo "Fetching ECS Task Public IP..."
        TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER_NAME --service-name $ECS_SERVICE_NAME --region $AWS_REGION --query 'taskArns[0]' --output text)
        ENI_ID=$(aws ecs describe-tasks --tasks $TASK_ARN --cluster $ECS_CLUSTER_NAME --region $AWS_REGION --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" --output text)
        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --region $AWS_REGION --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        echo "Public IP: $PUBLIC_IP"
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
